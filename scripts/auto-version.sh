#!/bin/bash

# 🏷️ Script de versioning automatique simple
# Usage: ./scripts/auto-version.sh [patch|minor|major]

set -e

# Couleurs pour les messages
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}🏷️ Auto-versioning CESI Zen${NC}"

# Vérifier qu'on est sur main
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo -e "${RED}❌ Erreur: Vous devez être sur la branche 'main'${NC}"
    echo -e "${YELLOW}Commande: git checkout main${NC}"
    exit 1
fi

# Vérifier que le working directory est propre
if ! git diff-index --quiet HEAD --; then
    echo -e "${RED}❌ Erreur: Il y a des modifications non commitées${NC}"
    echo -e "${YELLOW}Commande: git add . && git commit -m 'votre message'${NC}"
    exit 1
fi

# Type de version (par défaut: patch)
VERSION_TYPE=${1:-patch}

# Valider le type de version
if [[ ! "$VERSION_TYPE" =~ ^(patch|minor|major)$ ]]; then
    echo -e "${RED}❌ Type de version invalide: $VERSION_TYPE${NC}"
    echo -e "${YELLOW}Usage: ./scripts/auto-version.sh [patch|minor|major]${NC}"
    exit 1
fi

echo -e "${BLUE}📋 Configuration:${NC}"
echo -e "  Branche: ${GREEN}$CURRENT_BRANCH${NC}"
echo -e "  Type: ${GREEN}$VERSION_TYPE${NC}"

# Récupérer la version actuelle
CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
echo -e "  Version actuelle: ${GREEN}$CURRENT_VERSION${NC}"

# Calculer la nouvelle version
VERSION_CLEAN=${CURRENT_VERSION#v}
IFS='.' read -ra VERSION_PARTS <<< "$VERSION_CLEAN"
MAJOR=${VERSION_PARTS[0]:-0}
MINOR=${VERSION_PARTS[1]:-0}
PATCH=${VERSION_PARTS[2]:-0}

case $VERSION_TYPE in
    "major")
        MAJOR=$((MAJOR + 1))
        MINOR=0
        PATCH=0
        ;;
    "minor")
        MINOR=$((MINOR + 1))
        PATCH=0
        ;;
    "patch")
        PATCH=$((PATCH + 1))
        ;;
esac

NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
echo -e "  Nouvelle version: ${GREEN}$NEW_VERSION${NC}"

# Confirmation
echo ""
read -p "Voulez-vous créer la version $NEW_VERSION ? (y/N) " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}⏹️  Annulé par l'utilisateur${NC}"
    exit 0
fi

echo -e "${BLUE}🚀 Création de la version...${NC}"

# Récupérer le dernier commit pour le message
LAST_COMMIT=$(git log -1 --pretty=format:"%s")

# Créer le tag
git tag -a "$NEW_VERSION" -m "🏷️ Release $NEW_VERSION

Type: $VERSION_TYPE
Commit: $LAST_COMMIT

Generated by auto-version script"

echo -e "${GREEN}✅ Tag $NEW_VERSION créé localement${NC}"

# Pousser le tag
echo -e "${BLUE}📤 Push du tag vers origin...${NC}"
git push origin "$NEW_VERSION"

echo -e "${GREEN}✅ Tag $NEW_VERSION poussé vers GitHub${NC}"

# Pousser aussi main pour être sûr
git push origin main

echo ""
echo -e "${GREEN}🎉 Version $NEW_VERSION créée avec succès !${NC}"
echo ""
echo -e "${BLUE}📋 Prochaines étapes:${NC}"
echo -e "  1. Vérifiez sur GitHub: ${YELLOW}https://github.com/$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\/[^/]*\).*/\1/' | sed 's/\.git$//')/tags${NC}"
echo -e "  2. La CI/CD se déclenche automatiquement"
echo -e "  3. Créez une release si nécessaire"

echo ""
echo -e "${BLUE}🏷️ Historique des versions:${NC}"
git tag -l | sort -V | tail -5
