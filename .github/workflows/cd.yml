name: üöÄ Continuous Deployment

on:
  workflow_run:
    workflows: ["üîÑ CI Pipeline"]
    types: [completed]
    branches: [main]
  
  # D√©ploiement manuel
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/cesi-zen

jobs:
  # Build et Push des images Docker
  build-push:
    name: üèóÔ∏è Build & Push Docker Images
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4

      - name: üê≥ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Generate image tags
        id: tags
        run: |
          # Convertir en minuscules pour ghcr.io
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_BASE="ghcr.io/${REPO_OWNER}/cesi-zen"
          
          echo "image_base=${IMAGE_BASE}" >> $GITHUB_OUTPUT
          echo "tag_version=${IMAGE_BASE}-${{ matrix.service }}:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_latest=${IMAGE_BASE}-${{ matrix.service }}:latest" >> $GITHUB_OUTPUT

      - name: üèóÔ∏è Build and Push
        uses: docker/build-push-action@v5
        with:
          context: ./cesi-zen-code/${{ matrix.service == 'backend' && 'backend-ts' || 'frontend' }}
          file: ./cesi-zen-code/${{ matrix.service == 'backend' && 'backend-ts' || 'frontend' }}/Dockerfile
          push: true
          tags: |
            ${{ steps.tags.outputs.tag_version }}
            ${{ steps.tags.outputs.tag_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # D√©ploiement
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Generate deployment tags
        id: deploy-tags
        run: |
          # Convertir en minuscules pour ghcr.io
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_BASE="ghcr.io/${REPO_OWNER}/cesi-zen"
          
          echo "image_backend=${IMAGE_BASE}-backend:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "image_frontend=${IMAGE_BASE}-frontend:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: üöÄ Deploy with Docker Compose
        run: |
          echo "üöÄ D√©ploiement de la version ${{ steps.version.outputs.version }}"
          
          # Variables d'environnement pour le d√©ploiement
          export DOCKER_TAG=${{ steps.version.outputs.version }}
          export IMAGE_BACKEND=${{ steps.deploy-tags.outputs.image_backend }}
          export IMAGE_FRONTEND=${{ steps.deploy-tags.outputs.image_frontend }}
          
          echo "Images √† d√©ployer :"
          echo "  Backend: $IMAGE_BACKEND"
          echo "  Frontend: $IMAGE_FRONTEND"
          
          # Ici, vous ajouteriez vos commandes de d√©ploiement r√©elles :
          # 
          # Pour un serveur distant :
          # ssh user@server "cd /app && docker compose pull && docker compose up -d"
          #
          # Pour Railway :
          # railway deploy
          #
          # Pour Heroku :
          # heroku container:push web --app cesi-zen-api
          # heroku container:release web --app cesi-zen-api
          #
          # Pour DigitalOcean App Platform :
          # doctl apps create-deployment <app-id>

      - name: üè• Health Check
        run: |
          echo "üè• V√©rification de l'application..."
          
          # Attendre que les services d√©marrent
          sleep 30
          
          # Health checks (√† adapter selon votre environnement)
          # curl -f https://your-domain.com/api/health || exit 1
          # curl -f https://your-domain.com/ || exit 1
          
          echo "‚úÖ Application d√©ploy√©e et fonctionnelle"

      - name: üéâ Success
        run: |
          echo "üéâ D√©ploiement r√©ussi !"
          echo "Version: ${{ steps.version.outputs.version }}"
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "Images disponibles sur: ${{ env.REGISTRY }}/${REPO_OWNER}/cesi-zen"