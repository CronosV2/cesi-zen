name: 🚀 Continuous Deployment

on:
  workflow_run:
    workflows: ["🧪 Continuous Integration"]
    types:
      - completed
    branches: [main]
  
  # Déploiement manuel en cas de besoin
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/cesi-zen

jobs:
  # Vérification des prérequis
  check-prerequisites:
    name: 🔍 Check Prerequisites
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: ✅ Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Construction et publication des images Docker
  build-and-push:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should-deploy == 'true'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BASE }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./cesi-zen-code/${{ matrix.component == 'backend' && 'backend-ts' || 'frontend' }}
          file: ./cesi-zen-code/${{ matrix.component == 'backend' && 'backend-ts' || 'frontend' }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Déploiement sur staging
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build-and-push]
    if: needs.check-prerequisites.outputs.environment == 'staging'
    
    environment:
      name: staging
      url: https://cesi-zen-staging.yourdomain.com

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🧪 Déploiement vers l'environnement de staging..."
          
          # Ici vous pouvez ajouter vos commandes de déploiement :
          # - SSH vers votre serveur de staging
          # - Mise à jour des images Docker
          # - Rolling restart des services
          # - Health checks
          
          # Exemple avec docker compose sur un serveur distant :
          # ssh user@staging-server << 'EOF'
          # cd /path/to/cesi-zen
          # docker compose pull
          # docker compose up -d --force-recreate
          # EOF

      - name: 🏥 Health check staging
        run: |
          echo "🏥 Vérification de la santé de l'application..."
          # curl -f https://cesi-zen-staging.yourdomain.com/api/health

  # Tests post-déploiement
  post-deployment-tests:
    name: 🧪 Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: needs.check-prerequisites.outputs.environment == 'staging'

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Exécution des tests de fumée..."
          
          # Tests de base pour vérifier que l'application fonctionne
          # curl -f https://cesi-zen-staging.yourdomain.com/
          # curl -f https://cesi-zen-staging.yourdomain.com/api/health
          
          # Tests d'API basiques
          # curl -X POST https://cesi-zen-staging.yourdomain.com/api/auth/register \
          #   -H "Content-Type: application/json" \
          #   -d '{"email":"test@example.com","password":"test123"}'

  # Déploiement en production (nécessite approbation manuelle)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build-and-push]
    if: needs.check-prerequisites.outputs.environment == 'production'
    
    environment:
      name: production
      url: https://cesi-zen.yourdomain.com

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Déploiement vers la production..."
          
          # Commandes de déploiement production
          # Ces commandes sont similaires au staging mais avec plus de précautions :
          # - Backup de la base de données
          # - Déploiement Blue/Green ou Rolling
          # - Monitoring renforcé
          
          echo "✅ Déploiement production terminé"

      - name: 🏥 Health check production
        run: |
          echo "🏥 Vérification de la santé de la production..."
          # curl -f https://cesi-zen.yourdomain.com/api/health

  # Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deployment-tests]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')

    steps:
      - name: 📢 Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Déploiement staging réussi"
          elif [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Déploiement production réussi"
          else
            echo "❌ Échec du déploiement"
          fi
          
          # Ici vous pouvez ajouter des notifications :
          # - Slack
          # - Discord
          # - Email
          # - Teams
          
          # Exemple Slack :
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚀 CESI Zen déployé avec succès!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback en cas de problème
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    environment:
      name: rollback

    steps:
      - name: 🔄 Rollback deployment
        run: |
          echo "🔄 Rollback du déploiement en cours..."
          
          # Commandes de rollback :
          # - Retour à la version précédente
          # - Restauration de la base de données si nécessaire
          # - Vérifications post-rollback
          
          echo "✅ Rollback terminé"
