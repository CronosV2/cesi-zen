name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Variables d'environnement globales
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.5.2'

jobs:
  # Job pour le backend TypeScript
  backend-tests:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cesi-zen-code/backend-ts

    # Services pour MongoDB (pour les tests d'int√©gration)
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: TypeScript type check
        run: pnpm run build

      - name: Run tests
        run: pnpm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/cesi-zen-test?authSource=admin
          JWT_SECRET: test-secret-key-for-ci
          PORT: 5000

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cesi-zen-code/backend-ts/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Job pour le frontend Next.js
  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cesi-zen-code/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: TypeScript type check
        run: pnpm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000

      - name: Export static files (pour v√©rifier que l'export fonctionne)
        run: |
          # V√©rifier si Next.js peut g√©n√©rer une version statique
          echo "Build completed successfully"

  # Job pour les tests d'int√©gration (optionnel)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install backend dependencies
        working-directory: ./cesi-zen-code/backend-ts
        run: pnpm install --frozen-lockfile

      - name: Build backend
        working-directory: ./cesi-zen-code/backend-ts
        run: pnpm run build

      - name: Start backend server in background
        working-directory: ./cesi-zen-code/backend-ts
        run: |
          pnpm run start &
          echo $! > backend.pid
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/cesi-zen-test?authSource=admin
          JWT_SECRET: test-secret-key-for-ci
          PORT: 5000

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done

      - name: Install frontend dependencies
        working-directory: ./cesi-zen-code/frontend
        run: pnpm install --frozen-lockfile

      - name: Run frontend build against running backend
        working-directory: ./cesi-zen-code/frontend
        run: pnpm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000

      - name: Stop backend server
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm backend.pid
          fi

  # Job de d√©ploiement (optionnel - √† configurer selon votre plateforme)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      # Exemple pour Vercel (frontend)
      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        if: false # D√©sactiv√© par d√©faut, √† activer selon vos besoins
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./cesi-zen-code/frontend

      # Exemple pour Heroku ou Railway (backend)
      - name: Deploy Backend
        if: false # D√©sactiv√© par d√©faut, √† activer selon vos besoins
        run: |
          echo "Configurer ici le d√©ploiement de votre backend"
          echo "Exemples: Heroku, Railway, DigitalOcean, AWS, etc."

      - name: Deployment notification
        run: |
          echo "üöÄ D√©ploiement simul√© avec succ√®s!"
          echo "Frontend: Pr√™t pour Vercel/Netlify"
          echo "Backend: Pr√™t pour Heroku/Railway/DigitalOcean" 