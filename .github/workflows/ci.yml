name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  # Tests du Backend
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    continue-on-error: false
    
    services:
      mongodb:
        image: mongo:7-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: cesi_zen_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cesi-zen-code/backend-ts/package-lock.json

      - name: 📥 Install backend dependencies
        working-directory: cesi-zen-code/backend-ts
        run: npm ci

      - name: 🔍 Lint backend code
        working-directory: cesi-zen-code/backend-ts
        run: npm run lint || true

      - name: 🏗️ Build backend
        working-directory: cesi-zen-code/backend-ts
        run: npm run build

      - name: 🧪 Run backend tests
        working-directory: cesi-zen-code/backend-ts
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password123@localhost:27017/cesi_zen_test?authSource=admin
          JWT_ACCESS_SECRET: test-secret-access
          JWT_REFRESH_SECRET: test-secret-refresh
          CORS_ORIGIN: http://localhost:3000

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: cesi-zen-code/backend-ts/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Tests du Frontend
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cesi-zen-code/frontend/package-lock.json

      - name: 📥 Install frontend dependencies
        working-directory: cesi-zen-code/frontend
        run: npm ci

      - name: 🔍 Lint frontend code
        working-directory: cesi-zen-code/frontend
        run: npm run lint || true

      - name: 🏗️ Build frontend
        working-directory: cesi-zen-code/frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000

  # Tests de performance et load
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start services
        run: |
          docker compose up -d backend mongodb
          sleep 30

      - name: 🏥 Wait for backend ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:5001/api/health; then
              echo "✅ Backend ready"
              break
            fi
            echo "⏳ Waiting for backend... ($i/30)"
            sleep 2
          done

      - name: ⚡ Load test authentication
        run: |
          echo "🔐 Test de charge sur l'authentification..."
          for i in {1..5}; do
            curl -s -X POST http://localhost:5001/api/auth/register \
              -H "Content-Type: application/json" \
              -d "{
                \"firstName\": \"Load\",
                \"lastName\": \"Test$i\",
                \"email\": \"load-test-$i@example.com\",
                \"password\": \"password123\",
                \"dateOfBirth\": \"1990-01-01\",
                \"ecole\": \"CESI\",
                \"promotion\": \"2024\",
                \"ville\": \"Test\"
              }" &
          done
          wait
          echo "✅ Tests de charge terminés"

      - name: 📊 API Response time test
        run: |
          echo "⏱️ Test temps de réponse API..."
          time curl -f http://localhost:5001/api/health
          echo "✅ Test temps de réponse terminé"

      - name: 🛑 Stop services
        if: always()
        run: docker compose down -v

  # Analyse de qualité du code
  code-quality:
    name: 📋 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Super-Linter
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true

  # Tests unitaires backend étendus
  backend-unit-tests:
    name: 🧪 Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: cesi_zen_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cesi-zen-code/backend-ts/package-lock.json

      - name: 📥 Install dependencies
        working-directory: cesi-zen-code/backend-ts
        run: npm ci

      - name: 🧪 Run unit tests
        working-directory: cesi-zen-code/backend-ts
        run: npm run test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password123@localhost:27017/cesi_zen_test?authSource=admin
          JWT_ACCESS_SECRET: test-secret-access
          JWT_REFRESH_SECRET: test-secret-refresh

      - name: 🧪 Run integration tests
        working-directory: cesi-zen-code/backend-ts
        run: |
          # Tests d'API endpoints
          npm test -- --testPathPattern=integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password123@localhost:27017/cesi_zen_test?authSource=admin
          JWT_ACCESS_SECRET: test-secret-access
          JWT_REFRESH_SECRET: test-secret-refresh

      - name: 🗄️ Database tests
        working-directory: cesi-zen-code/backend-ts
        run: |
          echo "🔍 Test connexion base de données..."
          node -e "
            const mongoose = require('mongoose');
            mongoose.connect('mongodb://admin:password123@localhost:27017/cesi_zen_test?authSource=admin')
              .then(() => {
                console.log('✅ Connexion MongoDB réussie');
                return mongoose.connection.db.admin().ping();
              })
              .then(() => {
                console.log('✅ Ping MongoDB réussi');
                process.exit(0);
              })
              .catch(err => {
                console.error('❌ Erreur MongoDB:', err);
                process.exit(1);
              });
          "

  # Tests E2E complets
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start full application
        run: |
          docker compose up -d
          sleep 45

      - name: 🏥 Health checks
        run: |
          echo "🔍 Vérification backend..."
          curl -f http://localhost:5001/api/health || exit 1
          
          echo "🔍 Vérification frontend..."
          curl -f http://localhost:3001/ || exit 1
          
          echo "🔍 Vérification MongoDB..."
          curl -f http://localhost:8081 || echo "Mongo Express pas accessible"

      - name: 🧪 Tests d'authentification
        run: |
          echo "🔐 Test inscription utilisateur..."
          REGISTER_RESPONSE=$(curl -s -X POST http://localhost:5001/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{
              "firstName": "Test",
              "lastName": "User", 
              "email": "test-e2e@example.com",
              "password": "password123",
              "dateOfBirth": "1990-01-01",
              "ecole": "CESI",
              "promotion": "2024",
              "ville": "Test"
            }')
          
          echo "📧 Test connexion utilisateur..."
          LOGIN_RESPONSE=$(curl -s -X POST http://localhost:5001/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{
              "email": "test-e2e@example.com",
              "password": "password123"
            }')
          
          echo "✅ Tests d'authentification réussis"

      - name: 🧪 Tests d'API
        run: |
          echo "📊 Test API santé..."
          curl -f http://localhost:5001/api/health
          
          echo "📝 Test création article (si endpoint existe)..."
          curl -s -X GET http://localhost:5001/api/articles || echo "Endpoint articles non disponible"
          
          echo "👤 Test profil utilisateur..."
          curl -s -X GET http://localhost:5001/api/profile || echo "Endpoint profile non disponible"

      - name: 🧪 Tests frontend
        run: |
          echo "🎨 Test pages principales..."
          curl -f http://localhost:3001/ 
          curl -f http://localhost:3001/login
          curl -f http://localhost:3001/register
          curl -f http://localhost:3001/about
          
          echo "✅ Tests frontend réussis"

      - name: 🛑 Stop services
        if: always()
        run: docker compose down -v

  # Rapport de réussite global
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-unit-tests, performance-tests, e2e-tests, code-quality]
    if: success()

    steps:
      - name: 🎉 All checks passed
        run: |
          echo "🎉 Tous les tests CI sont passés avec succès !"
          echo "✅ Backend tests: OK"
          echo "✅ Frontend tests: OK" 
          echo "✅ Backend unit tests: OK"
          echo "✅ Performance tests: OK"
          echo "✅ E2E tests: OK"
          echo "✅ Code quality: OK"
