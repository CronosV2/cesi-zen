name: 🔄 CI Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]                    # 🏷️ CI sur les tags auto-générés
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  # Tests du Backend
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: cesi_zen_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cesi-zen-code/backend-ts/package-lock.json

      - name: 📥 Install dependencies
        working-directory: cesi-zen-code/backend-ts
        run: npm ci

      - name: 🔍 Lint backend code
        working-directory: cesi-zen-code/backend-ts
        run: npm run lint || true

      - name: 🧪 Run backend tests
        working-directory: cesi-zen-code/backend-ts
        run: npm run test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password123@localhost:27017/cesi_zen_test?authSource=admin
          JWT_ACCESS_SECRET: test-secret-access
          JWT_REFRESH_SECRET: test-secret-refresh

      - name: 🏗️ Build backend
        working-directory: cesi-zen-code/backend-ts
        run: npm run build

  # Tests du Frontend
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cesi-zen-code/frontend/package-lock.json

      - name: 📥 Install dependencies
        working-directory: cesi-zen-code/frontend
        run: npm ci

      - name: 🔍 Lint frontend code
        working-directory: cesi-zen-code/frontend
        run: npm run lint || true

      - name: 🏗️ Build frontend
        working-directory: cesi-zen-code/frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5001

  # Test Docker (optionnel - vérifie que docker-compose fonctionne)
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker images
        run: |
          echo "🔨 Construction des images Docker..."
          docker compose build --no-cache

      - name: 🚀 Start services (test)
        run: |
          echo "🚀 Test de démarrage des services..."
          docker compose up -d
          sleep 30

      - name: 🏥 Health check
        run: |
          echo "🔍 Vérification que les services démarrent correctement..."
          curl -f http://localhost:5001/api/health || exit 1
          curl -f http://localhost:3001/ || exit 1

      - name: 🛑 Stop services
        if: always()
        run: docker compose down -v

  # Rapport de réussite
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: success()

    steps:
      - name: 🎉 All checks passed
        run: |
          echo "🎉 Pipeline CI réussie !"
          echo "✅ Backend: lint + tests + build"
          echo "✅ Frontend: lint + build" 
          echo "✅ Docker: build + start test"
          echo ""
          echo "📋 Prêt pour le déploiement !"